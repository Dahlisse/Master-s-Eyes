# backend/requirements.txt

# ==================== 핵심 프레임워크 ====================

fastapi==0.104.1
uvicorn[standard]==0.24.0
pydantic==2.5.0
python-multipart==0.0.6

# ==================== 비동기 HTTP & WebSocket ====================

aiohttp==3.9.1
aiofiles==23.2.0
websockets==12.0
httpx==0.25.2

# ==================== 데이터베이스 ====================

sqlalchemy[asyncio]==2.0.23
asyncpg==0.29.0
alembic==1.13.1
psycopg2-binary==2.9.9

# ==================== Redis & 캐싱 ====================

redis==5.0.1
aioredis==2.0.1

# ==================== 스케줄러 ====================

apscheduler==3.10.4

# ==================== 데이터 처리 ====================

pandas==2.1.4
numpy==1.25.2
scipy==1.11.4

# ==================== 백테스팅 & 금융 ====================

bt==0.2.9
pyfolio==0.9.2
yfinance==0.2.23
pandas-datareader==0.10.0
ta==0.10.2

# ==================== 머신러닝 ====================

scikit-learn==1.3.2
numba==0.58.1

# ==================== 재시도 & 백오프 ====================

backoff==2.2.1
tenacity==8.2.3

# ==================== 로깅 & 모니터링 ====================

structlog==23.2.0
sentry-sdk[fastapi]==1.38.0

# ==================== 시스템 모니터링 ====================

psutil==5.9.6

# ==================== 환경 변수 ====================

python-dotenv==1.0.0

# ==================== 개발 도구 ====================

pytest==7.4.3
pytest-asyncio==0.21.1
pytest-cov==4.1.0
black==23.11.0
isort==5.12.0
flake8==6.1.0
mypy==1.7.1

# ==================== API 문서 ====================

python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4

# backend/.env.template

# ==================== 한투증권 API ====================

KIS_APP_KEY=your_app_key_here
KIS_APP_SECRET=your_app_secret_here
KIS_IS_MOCK=true

# ==================== 데이터베이스 ====================

DATABASE_URL=postgresql+asyncpg://username:password@localhost:5432/masters_eye
DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_NAME=masters_eye
DATABASE_USER=masters_eye_user
DATABASE_PASSWORD=your_secure_password

# ==================== Redis ====================

REDIS_URL=redis://localhost:6379/0
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=

# ==================== 애플리케이션 설정 ====================

ENVIRONMENT=development
DEBUG=true
LOG_LEVEL=INFO
JSON_LOGGING=false
SECRET_KEY=your-super-secret-key-change-this-in-production

# ==================== 실시간 데이터 수집 설정 ====================

REALTIME_MAX_CONNECTIONS=5
REALTIME_BATCH_SIZE=100
REALTIME_FLUSH_INTERVAL=5
REALTIME_CACHE_EXPIRE=60
REALTIME_MAX_QUEUE_SIZE=10000
REALTIME_ENABLE_MONITORING=true

# ==================== 스케줄러 설정 ====================

SCHEDULER_TIMEZONE=Asia/Seoul
SCHEDULER_MAX_INSTANCES=3
SCHEDULER_MISFIRE_GRACE_TIME=30

# ==================== API 설정 ====================

API_HOST=0.0.0.0
API_PORT=8000
API_WORKERS=1
API_RELOAD=true

# ==================== CORS 설정 ====================

CORS_ORIGINS=[“http://localhost:3000”,“http://localhost:8080”]
CORS_CREDENTIALS=true

# ==================== 외부 API ====================

FRED_API_KEY=your_fred_api_key_here
ALPHA_VANTAGE_API_KEY=your_alpha_vantage_key_here

# backend/app/core/config.py (완전 통합)

“””
애플리케이션 설정 관리

- 환경 변수 로딩
- 설정 검증
- 타입 안전성
  “””

import os
from typing import List, Optional
from dataclasses import dataclass
from dotenv import load_dotenv

# .env 파일 로드

load_dotenv()

@dataclass
class DatabaseConfig:
“”“데이터베이스 설정”””
url: str = os.getenv(“DATABASE_URL”, “postgresql+asyncpg://localhost:5432/masters_eye”)
host: str = os.getenv(“DATABASE_HOST”, “localhost”)
port: int = int(os.getenv(“DATABASE_PORT”, “5432”))
name: str = os.getenv(“DATABASE_NAME”, “masters_eye”)
user: str = os.getenv(“DATABASE_USER”, “masters_eye_user”)
password: str = os.getenv(“DATABASE_PASSWORD”, “password”)

```
def get_url(self) -> str:
    """데이터베이스 URL 반환"""
    if self.url:
        return self.url
    return f"postgresql+asyncpg://{self.user}:{self.password}@{self.host}:{self.port}/{self.name}"
```

@dataclass
class RedisConfig:
“”“Redis 설정”””
url: str = os.getenv(“REDIS_URL”, “redis://localhost:6379/0”)
host: str = os.getenv(“REDIS_HOST”, “localhost”)
port: int = int(os.getenv(“REDIS_PORT”, “6379”))
db: int = int(os.getenv(“REDIS_DB”, “0”))
password: Optional[str] = os.getenv(“REDIS_PASSWORD”)

```
def get_url(self) -> str:
    """Redis URL 반환"""
    if self.url:
        return self.url
    auth = f":{self.password}@" if self.password else ""
    return f"redis://{auth}{self.host}:{self.port}/{self.db}"
```

@dataclass
class KISConfig:
“”“KIS API 설정”””
app_key: str = os.getenv(“KIS_APP_KEY”, “”)
app_secret: str = os.getenv(“KIS_APP_SECRET”, “”)
is_mock: bool = os.getenv(“KIS_IS_MOCK”, “true”).lower() == “true”
base_url: str = “https://openapi.koreainvestment.com:9443”
mock_url: str = “https://openapivts.koreainvestment.com:29443”
websocket_url: str = “ws://ops.koreainvestment.com:21000”

@dataclass
class RealtimeConfig:
“”“실시간 데이터 수집 설정”””
max_concurrent_connections: int = int(os.getenv(“REALTIME_MAX_CONNECTIONS”, “5”))
batch_size: int = int(os.getenv(“REALTIME_BATCH_SIZE”, “100”))
flush_interval: int = int(os.getenv(“REALTIME_FLUSH_INTERVAL”, “5”))
cache_expire: int = int(os.getenv(“REALTIME_CACHE_EXPIRE”, “60”))
max_queue_size: int = int(os.getenv(“REALTIME_MAX_QUEUE_SIZE”, “10000”))
enable_monitoring: bool = os.getenv(“REALTIME_ENABLE_MONITORING”, “true”).lower() == “true”

@dataclass
class AppConfig:
“”“애플리케이션 설정”””
environment: str = os.getenv(“ENVIRONMENT”, “development”)
debug: bool = os.getenv(“DEBUG”, “false”).lower() == “true”
log_level: str = os.getenv(“LOG_LEVEL”, “INFO”)
json_logging: bool = os.getenv(“JSON_LOGGING”, “false”).lower() == “true”
secret_key: str = os.getenv(“SECRET_KEY”, “change-this-in-production”)

```
# API 설정
host: str = os.getenv("API_HOST", "0.0.0.0")
port: int = int(os.getenv("API_PORT", "8000"))
workers: int = int(os.getenv("API_WORKERS", "1"))
reload: bool = os.getenv("API_RELOAD", "true").lower() == "true"

# CORS 설정
cors_origins: List[str] = os.getenv("CORS_ORIGINS", "['*']")
cors_credentials: bool = os.getenv("CORS_CREDENTIALS", "true").lower() == "true"
```

# 전역 설정 인스턴스들

_database_config: Optional[DatabaseConfig] = None
_redis_config: Optional[RedisConfig] = None
_kis_config: Optional[KISConfig] = None
_realtime_config: Optional[RealtimeConfig] = None
_app_config: Optional[AppConfig] = None

def get_database_config() -> DatabaseConfig:
“”“데이터베이스 설정 반환”””
global _database_config
if _database_config is None:
_database_config = DatabaseConfig()
return _database_config

def get_redis_config() -> RedisConfig:
“”“Redis 설정 반환”””
global _redis_config
if _redis_config is None:
_redis_config = RedisConfig()
return _redis_config

def get_kis_config() -> KISConfig:
“”“KIS API 설정 반환”””
global _kis_config
if _kis_config is None:
_kis_config = KISConfig()
return _kis_config

def get_realtime_config() -> RealtimeConfig:
“”“실시간 설정 반환”””
global _realtime_config
if _realtime_config is None:
_realtime_config = RealtimeConfig()
return